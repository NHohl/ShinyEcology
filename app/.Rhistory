#------------------------ Basic Dat Wrangling
library("dplyr")
# Mutate
# mutate (dataframe_name, newcolumn_name = value)
murders <- mutate(murders, rate = total/population * 100000)
#------------------------ Basic Data Wrangling (with dplyr)
library(dslabs)
data("murders")
m <- murders
m
murders
head(murders)
# Mutate
# mutate (dataframe_name, newcolumn_name = value)
# The value can use variables from inside the data frame
murders <- mutate(murders, rate = total/population * 100000)
head(murders)
filter(murders, rate < 0.7)
new_table <- select(murders, state, region, rate)
filter(new_table, rate < 0.7)
filter(murders, rate < 0.71)
filter(new_table, rate < 0.71)
murders %>% select(state, region, rate) %>% filter(rate <= 0.71)
grades <- data.frame(names = c("John", "Juan"),
exam_1 = c(95, 80),
exam_2 = c(90,85))
grades
class(grades$names)
?"data.frame"
?"data.frame()"
?data.frame()
population_in_millions <- murders$population / 10^6
plot(population_in_millions, total_gun_murders)
total_gun_murders <- murders$total
plot(population_in_millions, total_gun_murders)
hist(murders$rate)
murders$state[which.max(murders$rate)]
boxplot(rate~region, data = murders)
library(dslabs)
library(dplyr)
murders <- data(murders)
head(murders)
murders <- data(murders)
head(murders)
murders <- data("murders")
head(murders)
data("murders")
head(murders)
murders <- mutate(murders, rate = total / population * 100000)
head(murders)
ind <- which.min(murders$rate)
if (murders$rate[ind] < 0.5){
print(murders$state[ind])
}else{
print("No state has murder rate that low.")
}
a <- 0
ifelse(a >0, 1/a, NA)
a<- c(0, 1,2,-4,5)
ifelse(a > 0, 1/a, NA)
data(na_example)
data("na_example")
head(na_example)
data(na_example)
data("na_example")
head(na_example)
sum(is.na(na_example))
no_nas <- ifelse(is.na(na_example), 0, na_example)
no_nas
sum(is.na(no_nas))
z <- c(T, F,F)
z
any(z)
all(z)
avg <- function(x){
s <- sum(x)
n <- length(x)
s/n
}
avg(no_nas)
identical(avg(), mean())
identical(avg(x), mean(x))
x <- 1:100
avg(x)
identical(avg(x), mean(x))
avg <- function(x, arithmetic = TRUE){
n <- length(x)
ifelse(arithmetic, sum(x)/n, prod(x)^(1/n))
}
avg(x)
avg(x, arithmetic = F)
compute_s_n <- function(n){
x <- 1:100
sum(x)
}
m <- 25
s_n <- vector(length = m)
s_n <- vector(length = m)
for(n in 1:m){
s_n[n] <- compute_s_n
}
for(n in 1:m){
s_n[n] <- compute_s_n(n)
}
for(n in 1:m){
s_n[n] <- compute_s_n(n)
s_n
}
s_n
s_n <- vector(length = m)
s_n
for(n in 1:m){
s_n[n] <- compute_s_n(n)
}
s_n
compute_s_n <- function(n){
x <- 1:n
sum(n)
}
for(n in 1:m){
s_n[n] <- compute_s_n(n)
}
s_n
compute_s_n <- function(n){
x <- 1:n
sum(x)
}
for(n in 1:m){
s_n[n] <- compute_s_n(n)
}
s_n
n <- 1:m
plot(n, s_n)
lines(n, n*(n+1)/2)
index <- heights$sex =="Male"
x <- heights$height[index]
x
library(dslabs)
avg <- mean(x)
SD <- sd(x)
c(avg = avg, SD = SD)
z <- scale(x)
z
mean(abs(z) < 2)
library(tidyverse)
data(murders)
data("murders")
murdders
murders
head(murders)
ggplot(murders)
ggplot(data = murders)
murders %>% ggplot()
murders %>% ggplot() +
geom_point(aes(x = population / 10^6, y = total))
murders %>% ggplot() +
geom_point(aes(x = population / 10^6, y = total), label = abbs)
murders %>% ggplot() +
geom_point(aes(x = population / 10^6, y = total), label = abb)
murders %>% ggplot() +
geom_point(aes(x = population / 10^6, y = total, label = abb))
murders %>% ggplot() +
geom_point(aes(x = population / 10^6, y = total, text = abb))
murders %>% ggplot() +
geom_point(aes(x = population / 10^6, y = total)) +
geom_text(aes(population/10^6, total, label = abb))
murders %>% ggplot() +
geom_point(aes(x = population / 10^6, y = total), size = 3) +
geom_text(aes(population/10^6, total, label = abb))
murders %>% ggplot() +
geom_point(aes(x = population / 10^6, y = total), size = 3) +
geom_text(aes(population/10^6, total, label = abb), nudge.x = 1.5)
murders %>% ggplot() +
geom_point(aes(x = population / 10^6, y = total), size = 3) +
geom_text(aes(population/10^6, total, label = abb), nudge_x = 1.5)
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(size = 3) +
geom_text(aes(population/10^6, total, label = abb), nudge_x = 1.5)
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(size = 3) +
geom_text(nudge_x = 1.5) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(size = 3) +
geom_text(nudge_x = 1.5) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(size = 3) +
geom_text(aes(label = abbs)nudge_x = 1.5) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(size = 3) +
geom_text(aes(label = abbs)nudge_x = 1.5) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(size = 3) +
geom_text(aes(label = abbs), nudge_x = 1.5) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(size = 3) +
geom_text(aes(label = abb), nudge_x = 1.5) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(size = 3) +
geom_text(aes(label = abb), nudge_x = 0.5) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(size = 3) +
geom_text(aes(label = abb), nudge_x = 0.01) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(size = 3) +
geom_text(aes(label = abb), nudge_x = 0.05) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(size = 3) +
geom_text(aes(label = abb), nudge_x = 0.075) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(size = 3) +
geom_text(aes(label = abb), nudge_x = 0.075) +
scale_x_log10() +
scale_y_log10()
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(aes(col = region)size = 3) +
geom_text(aes(label = abb), nudge_x = 0.075) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(aes(col = region),size = 3) +
geom_text(aes(label = abb), nudge_x = 0.075) +
scale_x_log10() +
scale_y_log10()
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(aes(col = region),size = 3) +
geom_text(aes(label = abb), nudge_x = 0.085) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10")
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(aes(col = region),size = 3) +
geom_text(aes(label = abb), nudge_x = 0.075) +
scale_x_log10() +
scale_y_log10() +
summarize(rate = sum(total)/sum(population) * 10^6) %>% .$rate
murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(aes(col = region),size = 3) +
geom_text(aes(label = abb), nudge_x = 0.075) +
scale_x_log10() +
scale_y_log10() +
xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010")
r <- summarize(rate = sum(total)/sum(population) * 10^6) %>% .$rate
r <- murders %>% summarize(rate = sum(total)/sum(population) * 10^6) %>% .$rate
r
r <- murders %>% summarize(rate = sum(total)/sum(population) * 10^6) %>% pull(rate)
r
?pull()
p + geom_point(aes(col=region), size = 3) +
geom_abline(intercept = log10(r))
p <- murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_point(aes(col = region),size = 3) +
geom_text(aes(label = abb), nudge_x = 0.075) +
scale_x_log10() +
scale_y_log10() +
xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010")
p + geom_point(aes(col=region), size = 3) +
geom_abline(intercept = log10(r))
p <- murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_text(aes(label = abb), nudge_x = 0.075) +
scale_x_log10() +
scale_y_log10() +
xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010")
p <- p +
geom_abline(intercep = log10(r), lty = 2, color = "darkgrey") +
geom_point(aes(col = region),size = 3)
p <- p +
geom_abline(intercept = log10(r), lty = 2, color = "darkgrey") +
geom_point(aes(col = region),size = 3)
p
p <- murders %>% ggplot(aes(x = population / 10^6, y = total)) +
geom_text(aes(label = abb), nudge_x = 0.075) +
scale_x_log10() +
scale_y_log10() +
xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010")
p
p <- p +
geom_abline(intercept = log10(r), lty = 2, color = "darkgrey") +
geom_point(aes(col = region),size = 3)
p
p <- p +
geom_abline(intercept = log10(r), lty = 2, color = "darkgrey") +
geom_point(aes(col = region),size = 3) +
scale_color_discrete(name = "Region")
p
library(ggthemes)
install.packages(ggthemes)
install.packages("ggthemes)
install.packages("ggthemes")
install.packages("ggrepel")
library(ggthemes)
library(ggrepel)
ds_theme_set()
p + theme_economist()
p + theme(fivethirtyeight_pal())
p + theme_fivethirtyeight()
p <- p + theme_economist()
p + geom_text_repel()
#First define the slope of the line
r <- murders %>% summarize(rate = sum(total)/sum(population) * 10^6) %>% .$rate
p <- murders %>% ggplot(aes(x = population / 10^6, y = total, label = abb)) +
geom_abline(intercept = log10(r), lty = 2, color = "darkgrey") +
geom_point(aes(col = region),size = 3) +
geom_text_repel() +
scale_color_discrete(name = "Region") +
scale_x_log10() +
scale_y_log10() +
xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010")
p
p <- murders %>% ggplot(aes(x = population / 10^6, y = total, label = abb)) +
geom_abline(intercept = log10(r), lty = 2, color = "darkgrey") +
geom_point(aes(col = region),size = 3) +
geom_text_repel() +
scale_color_discrete(name = "Region") +
scale_x_log10() +
scale_y_log10() +
xlab("Populations in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010") +
theme_economist()
p
p <- murders %>%
ggplot(aes(population/10^6, total, label = abb)) +
geom_abline(intercept = log10(r), lty = 2, color = "darkgrey") +
geom_point(aes(col = region), size = 3) +
geom_text_repel() +
scale_x_log10() +
scale_y_log10() +
xlab("Population in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010") +
scale_color_discrete(name = "Region") +
theme_economist()
p
?max.overlaps
??max.overlaps
?geom_text_repel
p <- murders %>%
ggplot(aes(population/10^6, total, label = abb)) +
geom_abline(intercept = log10(r), lty = 2, color = "darkgrey") +
geom_point(aes(col = region), size = 3) +
geom_text_repel(max.overlaps = 12) +
scale_x_log10() +
scale_y_log10() +
xlab("Population in millions (log scale)") +
ylab("Total number of murders (log scale)") +
ggtitle("US Gun Murders in 2010") +
scale_color_discrete(name = "Region") +
theme_economist()
data("heights")
heights %>% head
heights %>% filter(sex == "Male")
p <- heights %>% +
filter(sex == "Male") %>% +
ggplot(aes(x = height))
p <- heights %>%
filter(sex == "Male") %>%
ggplot(aes(x = height))
p
p + geom_histogram()
p + geom_histogram(binwidth = 1)
p + geom_histogram(binwidth = 1, fill = "blue", col = "black") +
xlab("Male heights in inches") +
ggtitle("Histogram")
p + geom_histogram(binwidth = 1, fill = "steelgray", col = "black") +
xlab("Male heights in inches") +
ggtitle("Histogram")
p + geom_histogram(binwidth = 1, fill = "steel_gray", col = "black") +
xlab("Male heights in inches") +
ggtitle("Histogram")
p + geom_histogram(binwidth = 1, fill = "lightgray", col = "black") +
xlab("Male heights in inches") +
ggtitle("Histogram")
p + geom_density()
p + geom_density(fill = "lightgrey")
p + geom_qq()
p + geom_qq(sample = height) #requires sample
p + geom_qq(aes(sample = heights)) #requires sample
p + geom_qq(aes(sample = height)) #requires sample
p <- heights %>% filter(sex == "Male") %>% ggplot(aes(x = height))
p1 <- p + geom_histogram(binwidth = 1, fill = "blue", col = "black")
p2 <- p + geom_histogram(binwidth = 2, fill = "blue", col = "black")
p3 <- p + geom_histogram(binwidth = 3, fill = "blue", col = "black")
# arrange plots next to each other in 1 row, 3 columns
library(gridExtra)
install.packages("gridExtra")
# arrange plots next to each other in 1 row, 3 columns
library(gridExtra)
grid.arrange(p1, p2, p3, ncol = 3)
heights %>%
ggplot(aes(height, fill = sex)) +
geom_density(alpha = 0.2)
install.packages("RODBC")
library("rodbc")
library(RODBC)
# Using a DSN
con <- dbConnect(odbc::odbc(), "DATABASE=BLUDB;HOSTNAME=dashdb-txn-sbox-yp-dal09-11.services.dal.bluemix.net")
library(RODBC)
# Using a DSN
con <- dbConnect(odbc::odbc(), "DATABASE=BLUDB;HOSTNAME=dashdb-txn-sbox-yp-dal09-11.services.dal.bluemix.net")
?dbconnect
?dbConnect
# Using a DSN
con <- dbConnect(user = "pwf04202",
password = rstudioapi::askForPassword("Database password"),
host = "dashdb-txn-sbox-yp-dal09-11.services.dal.bluemix.net",
port = 50000,
dbname = "BLUDB")
# Using a DSN
con <- dbConnect(user = "pwf04202",
password = rstudioapi::askForPassword("Database password"),
host = "dashdb-txn-sbox-yp-dal09-11.services.dal.bluemix.net",
port = 50000,
dbname = "BLUDB")
library("odbc")
library("ODBC")
library(ODBC)
install.packages("odbc")
library(ODBC)
library(odbc)
# Using a DSN
con <- dbConnect(user = "pwf04202",
password = rstudioapi::askForPassword("Database password"),
host = "dashdb-txn-sbox-yp-dal09-11.services.dal.bluemix.net",
port = 50000,
dbname = "BLUDB")
install.packages("shiny")
install.packages("shiny")
install_packages("flexdashboard")
install_package("flexdashboard")
install.packages("flexdashboard")
install.packages("Rtools")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("flexdashboard", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
install.packages("dplyr", ask = FALSE)
shiny::runApp('Projeto R/ShinyEcology/app')
shiny::runApp('Projeto R/ShinyEcology/app')
